{"name":"Portals","tagline":"An XHR/Ajax library with sugar for single page applications.","body":"Portals is a library for making XHR/AJAX requests with some syntactic sugar.\r\n\r\n## Getting Started\r\n\r\n### Install via NPM\r\n\r\n```\r\nnpm install --save portals\r\n```\r\n\r\nAnd make sure to `require` it:\r\n\r\n```javascript\r\nvar portals = require('portals')\r\n```\r\n\r\n### Install via Bower\r\n\r\n```\r\nbower install --save portals\r\n```\r\n\r\n## Create an Instance\r\n\r\nOnce installed, just instantiate an instance of the `Portal` constructor.\r\n\r\n```javascript\r\nvar http = new portals.Portal()\r\n```\r\n\r\n## Sending Requests\r\n\r\nSending requests isn't all that different from other libraries of this nature.  Simply supply a request object with url and method, along with any other request details you may need like a headers object, request body, etc...\r\n\r\nThe `send()` method, and the helper methods, will return a standard promise with `then()` for successful (200 status code) responses and `catch()` for errors.\r\n\r\n```javascript\r\nhttp.send({\r\n  method: 'GET',\r\n  url: '/some-endpoint',\r\n  headers: {\r\n    'Accept': 'application/json'\r\n  }\r\n})\r\n.then(function (res) {\r\n  // do something with response\r\n})\r\n```\r\n\r\n### Helpers\r\n\r\nPortals offers the typical helper methods for making method specific calls like `GET`, `POST`, `PUT` and `DELETE`.  These are basic shorthands and more advanced queries will want to make use of `send()`.\r\n\r\n```javascript\r\n// GET\r\nhttp.get('/posts')\r\n\r\n// POST\r\nhttp.post('/posts', { id: 1, name: 'example' })\r\n\r\n// PUT\r\nhttp.put('/posts/1', { name: 'changed example' })\r\n\r\n// DELETE\r\nhttp.del('/posts/1')\r\n```\r\n\r\n## Interceptors\r\n\r\nPortals is made extensible via \"interceptors\".  These are simply functions that have the capability to modify request and response data.  Portals ships with a few standard interceptors that you can optionally use by calling the method `useDefaultInterceptors()`.\r\n\r\n```javascript\r\nhttp.useDefaultInterceptors()\r\n```\r\n\r\nIf you want to cherry pick from the default interceptors, you can find them on the `interceptors` property and add them with the methods below.\r\n\r\n```javascript\r\nvar http = new portals.Portal()\r\nvar encodeJsonRequestInterceptor = portals.interceptors.encodeJsonRequest\r\n\r\nhttp.onRequest(encodeJsonRequestInterceptor)\r\n```\r\n\r\n### Adding Interceptors\r\n\r\nYou can add your own interceptors using either the `onRequest()` or the `onResponse()` methods.\r\n\r\nThe `onRequest()` method adds a function that will be run when a request is about to go.  It receives the `options` object for the request which contains information like method, url, headers, etc...  Interceptors must return an object with strings for `method` and `url`.\r\n\r\n```javascript\r\nvar http = new portals.Portal()\r\n\r\nhttp.onRequest(function (config) {\r\n  console.log('logging: ', config.url)\r\n\r\n  return config\r\n})\r\n\r\nhttp.get('/my-endpoint')\r\n// will print \"logging: /my-endpoint\"\r\n```\r\n\r\nThe response interceptor is almost identical to the request interceptor, accept instead of an `options` object it receives and returns the `response` object for the completed request.\r\n\r\n```javascript\r\nvar http = new portals.Portal()\r\n\r\nhttp.onResponse(function (res) {\r\n  res.body = 'intercepted!!!'\r\n\r\n  return res\r\n})\r\n\r\nhttp.get('/my-endpoint')\r\n// response body will be \"intercepted!!!\"\r\n```\r\n\r\n## Features\r\n\r\nAll features are just interceptors that come with the library.  These are available on the `interceptors` property and are automatically added when `useDefaultInterceptors()` is called.\r\n\r\n### Globals\r\n\r\nOften times you may need to set a global value, like a set of headers or default hostname for your request URLs.  This is where using globals and the `mergeGlobalsRequest` interceptor comes in handy.\r\n\r\n```javascript\r\nhttp.globals.hostname = 'http://some-api.com'\r\nhttp.globals.headers.Accept = 'application/yml'\r\n\r\nhttp.get('/my-endpoint')\r\n// will call \"http://some-api.com/my-endpoint\"\r\n```\r\n\r\n##### Standalone Usage\r\n\r\n```javascript\r\nhttp.onRequest( portals.interceptors.mergeGlobalsRequest )\r\n```\r\n\r\n### Concatenate Hostname and Url\r\n\r\nConcatenates the `hostname` and `url` for the request if \"http\" is not present in the URL.  \r\n\r\n##### Standalone Usage\r\n\r\n```javascript\r\nhttp.onRequest( portals.interceptors.buildUrlRequest )\r\n```\r\n\r\n### [PLANNED] URL Parameter Customization\r\n\r\n_Note: This interceptor has yet to be built._\r\n\r\nAllow tokens to be added to the url string and have those tokens replaced with matching key values from a \"params\" object.\r\n\r\n**Example:**\r\n\r\n```javascript\r\nhttp.send({\r\n  method: 'GET',\r\n  url: '/posts/:postId',\r\n  params: {\r\n    postId: 100\r\n  }\r\n})\r\n\r\n// hits \"/posts/100\"\r\n```\r\n\r\n##### Standalone Usage\r\n\r\n```javascript\r\nhttp.onRequest( portals.interceptors.parseUrlParamsRequest )\r\n```\r\n\r\n### [PLANNED] Query String Configuration\r\n\r\n_Note: This interceptor has yet to be built._\r\n\r\nBuilds a query string out of a \"query\" object.\r\n\r\n**Example:**\r\n\r\n```javascript\r\nhttp.send({\r\n  method: 'GET',\r\n  url: '/posts',\r\n  query: {\r\n    page: 20\r\n  }\r\n})\r\n\r\n// hits \"/posts?page=20\"\r\n```\r\n\r\n##### Standalone Usage\r\n\r\n```javascript\r\nhttp.onRequest( portals.interceptors.buildQueryRequest )\r\n```\r\n\r\n### Encode JSON Request Body\r\n\r\nEncodes a `data` or `body` object as JSON if the `Content-Type` header contains `\"json\"` and sets it as the request body.\r\n\r\n##### Standalone Usage\r\n\r\n```javascript\r\nhttp.onRequest( portals.interceptors.encodeJsonRequest )\r\n```\r\n\r\n### Parse JSON Response Body\r\n\r\nParses the `body` of the response if the `Content-Type` header contains `\"json\"`.\r\n\r\n##### Standalone Usage\r\n\r\n```javascript\r\nhttp.onRequest( portals.interceptors.parseJsonResponse )\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}